# -*- coding: utf-8 -*-
"""VXJ180018_Wine_SVM.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IYXU972PujVv-L0t1G9LfLZurwg7ulVO

#Exploratory Data Analysis

##1. Import Libraries
"""

## Code
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
import io 
import numpy as np

"""##2. Pandas to read data"""

## Code
from google.colab import files
uploaded = files.upload()

## Reading into Pandas
df = pd.read_csv(io.BytesIO(uploaded['wine_fraud.csv']))

"""##3. Check out info(), head(), and describe() methods"""

## Code
df.info()

df.head()

df.describe()

"""##4. Unique Variables in Target column trying to predict"""

'''
The unique variables in the target column that we are trying to predict are 
"Fraud" or "Legit". Our SVM algorithm has to determine if the quality of the 
wine is legit or fraud
'''

"""##5. Create a Countplot displaying count per category of legit vs fraud"""

## Code
sns.countplot(x ='quality', data = df)

"""##6. If there is a difference between red and white wine when it comes to fraud. Create a countplot that has the wine type on the x axis with the hue separating columns by Fraud vs Legit.


"""

## Code
sns.countplot(x ='type', data = df, hue='quality')

"""##7. Calculate the correlation between the various features and the "quality" column"""

# Mapping 
x = df['quality'].map({'Fraud' :0, "Legit" :1})

corr_include = ['fixed acidity', 'volatile acidity', 'citric acid','residual sugar', 
  'chlorides', 'free sulfur dioxide', 'total sulfur dioxide','density' ,'pH' ,
  'sulphates' ,'alcohol']

# Looping throught the whole list 
for i in corr_include:
  print(f"Correlation between {i} and quality is: {x.corr(df[i],method='pearson', min_periods=1)}")

"""##8. Create a bar plot of the correlation values to Fraudlent wine."""

# Drawing a Bar Graph
plt.figure(figsize=(12,6), dpi=200)

dummy_data = pd.get_dummies(df)
dummy_data.corr()['quality_Fraud'].iloc[:-1].sort_values().plot(kind='bar')

"""# Machine Learning Model (SVM)

##9. Convert the categorical column "type" from a string or "red" or "white" to dummy variables
"""

data = pd.get_dummies(dummy_data, columns =['type_red', 'type_white'])

"""##10.	Separate out the data into X features and y target label ("quality" column)"""

data["quality"] = data["quality_Fraud"] + data["quality_Legit"]
X = data.drop(['quality'], axis=1)
y = data['quality']

"""##11.	Perform a Train|Test split on the data, with a 10% test size."""

from sklearn.model_selection import train_test_split


X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1, random_state=101)

"""##12.	Scale the X train and X test data."""

# Perform Scaling
from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()
scaled_X_train = scaler.fit_transform(X_train)
scaled_X_test = scaler.transform(X_test)

"""## 13. Creating an instance of a Support Vector Machine Classifier"""

from sklearn.svm import SVC # Support Vector Classifier
from sklearn.model_selection import GridSearchCV
model = SVC()
model.fit(scaled_X_train, y_train)